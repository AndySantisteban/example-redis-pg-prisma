// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TypeDocument {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  enterprise Enterprise[]
  person     Person[]

  @@map(name: "type_document")
}

model Role {
  id   String @id @default(cuid())
  name String
  User User[]

  @@map(name: "role")
}

model Proffesion {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  speciality Speciality[]
  person     Person[]

  @@map(name: "proffesion")
}

model Speciality {
  id           String     @id @default(cuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  proffesion   Proffesion @relation(fields: [proffesionId], references: [id])
  proffesionId String     @map(name: "proffesion_id")

  @@map(name: "especiality")
}

model Country {
  id          String   @id @default(cuid())
  nameCountry String   @map(name: "name_country")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  departament Departament[]
  person      Person[]
  headquarter Headquarter[]

  @@map(name: "country")
}

model Departament {
  id              String   @id @default(cuid())
  nameDepartament String   @map(name: "name_departament")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  Country         Country  @relation(fields: [countryId], references: [id])
  countryId       String   @map(name: "country_id")

  district    District[]
  person      Person[]
  headquarter Headquarter[]

  @@map(name: "departament")
}

model District {
  id            String      @id @default(cuid())
  nameDistrict  String      @map(name: "name_district")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  Departament   Departament @relation(fields: [departamentId], references: [id])
  departamentId String      @map(name: "departament_id")

  province    Province[]
  person      Person[]
  headquarter Headquarter[]

  @@map(name: "district")
}

model Province {
  id           String        @id @default(cuid())
  nameProvince String        @map(name: "name_province")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  District     District      @relation(fields: [districtId], references: [id])
  districtId   String        @map(name: "district_id")
  person       Person[]
  headquarter  Headquarter[]

  @@map(name: "province")
}

model Headquarter {
  id            String       @id @default(cuid())
  name          String       @map(name: "name_headquarter")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  Country       Country      @relation(fields: [countryId], references: [id])
  countryId     String       @map(name: "country_id")
  Departament   Departament  @relation(fields: [departamentId], references: [id])
  departamentId String       @map(name: "departament_id")
  enterprise    Enterprise[]
  Province      Province     @relation(fields: [provinceId], references: [id])
  provinceId    String       @map(name: "province_id")
  District      District     @relation(fields: [districtId], references: [id])
  districtId    String       @map(name: "district_id")

  @@map(name: "headquarter")
}

model TypeEnterprise {
  id         String       @id @default(cuid())
  name       String       @map(name: "name_type_enterprise")
  enterprise Enterprise[]

  @@map("type_enterprise")
}

model Enterprise {
  id                    String            @id @default(cuid())
  companyName           String            @map(name: "name_enterprise")
  companyNameCommercial String            @map(name: "name_enterprise_commercial")
  signature             String            @map(name: "signature")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @default(now())
  email                 String            @map(name: "email")
  telephone             String            @map(name: "telephone")
  documentType          TypeDocument      @relation(fields: [documentTypeId], references: [id])
  documentTypeId        String            @map(name: "document_type_id")
  documentNumber        String            @map(name: "document_number")
  numberEmployee        Int               @map(name: "number_employee")
  statusEnterprise      EnterpriseStatus? @default(ACTIVE) @map(name: "status_employee")
  headquarter           Headquarter       @relation(fields: [headquarterId], references: [id])
  headquarterId         String            @map(name: "headquarter_id")
  user                  User              @relation(fields: [userId], references: [id])
  userId                String            @map(name: "user_id")
  typeEnterprise        TypeEnterprise    @relation(fields: [typeEnterpriseId], references: [id])
  typeEnterpriseId      String            @map(name: "type_enterprise_id")
  office                Office[]
  employee              Employee[]
  patient               Patient[]
  warehouse             Warehouse[]
  service               Services[]

  @@map(name: "enterprise")
}

enum EnterpriseStatus {
  ACTIVE
  INACTIVE
}

model CategoryOffice {
  id        String   @id @default(cuid())
  name      String   @map(name: "name_category_office")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  office    Office[]

  @@map(name: "category_office")
}

model Office {
  id               String         @id @default(cuid())
  name             String         @map(name: "name_consultorio")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  Enterprise       Enterprise     @relation(fields: [enterpriseId], references: [id])
  enterpriseId     String         @map(name: "enterprise_id")
  CategoryOffice   CategoryOffice @relation(fields: [categoryOfficeId], references: [id])
  categoryOfficeId String         @map(name: "category_office_id")
  schedule         Schedule[]

  @@map(name: "office")
}

model Person {
  id             String       @id @default(cuid())
  firstname      String
  secondName     String
  firstLastName  String
  secondLastName String
  birthDate      DateTime     @map(name: "birth_date")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  typeDocument   TypeDocument @relation(fields: [typeDocumentId], references: [id])
  typeDocumentId String       @map(name: "type_document_id")
  documentNumber String       @map(name: "document_number")
  country        Country      @relation(fields: [countryId], references: [id])
  countryId      String       @map(name: "country_id")
  departament    Departament  @relation(fields: [departamentId], references: [id])
  departamentId  String       @map(name: "departament_id")
  district       District     @relation(fields: [districtId], references: [id])
  districtId     String       @map(name: "district_id")
  province       Province     @relation(fields: [provinceId], references: [id])
  provinceId     String       @map(name: "province_id")
  proffesion     Proffesion   @relation(fields: [proffesionId], references: [id])
  proffesionId   String       @map(name: "proffesion_id")
  address        String       @map(name: "address")
  phone          String       @map(name: "phone")
  email          String       @map(name: "email")
  employee       Employee[]
  patient        Patient[]
  medic          Medic[]

  @@map(name: "person")
}

model Employee {
  id           String          @id @default(cuid())
  person       Person          @relation(fields: [personId], references: [id])
  personId     String          @map(name: "person_id")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now())
  enterprise   Enterprise      @relation(fields: [enterpriseId], references: [id])
  enterpriseId String          @map(name: "enterprise_id")
  status       EmployeeStatus? @default(ACTIVE) @map(name: "status")

  @@map(name: "employee")
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
}

model Patient {
  id           String         @id @default(cuid())
  person       Person         @relation(fields: [personId], references: [id])
  personId     String         @map(name: "person_id")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  enterprise   Enterprise     @relation(fields: [enterpriseId], references: [id])
  enterpriseId String         @map(name: "enterprise_id")
  status       PatientStatus? @default(ACTIVE) @map(name: "status")
  appointments Appointments[]

  @@map(name: "patient")
}

enum PatientStatus {
  ACTIVE
  INACTIVE
}

model Medic {
  id               String             @id @default(cuid())
  cmp              String             @unique() @map(name: "cmp")
  person           Person             @relation(fields: [personId], references: [id])
  personId         String             @map(name: "person_id")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  status           MedicStatus?       @default(ACTIVE) @map(name: "status")
  medicalSpecialty MedicalSpecialty[]
  appointments     Appointments[]
  schedule         Schedule[]

  @@map(name: "medic")
}

enum MedicStatus {
  ACTIVE
  INACTIVE
}

model MedicalSpecialty {
  id                  String   @id @default(cuid())
  name                String   @map(name: "name_speciality")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
  medicalSpeciality   Medic    @relation(fields: [medicalSpecialityId], references: [id])
  medicalSpecialityId String   @map(name: "medical_speciality_id")

  @@map(name: "speciality_medic")
}

model Appointments {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now())
  patient     Patient             @relation(fields: [patientId], references: [id])
  patientId   String              @map(name: "patient_id")
  medic       Medic               @relation(fields: [medicId], references: [id])
  medicId     String              @map(name: "medic_id")
  status      AppointmentsStatus? @default(ACTIVE) @map(name: "status")
  initialDate DateTime            @map(name: "initial_date")
  finalDate   DateTime            @map(name: "final_date")
  description String?             @map(name: "description")

  @@map(name: "appointments")
}

model Schedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  dayOfWeek DateTime @map(name: "day_of_week")
  startTime DateTime @map(name: "start_time")
  endTime   DateTime @map(name: "end_time")
  medic     Medic    @relation(fields: [medicId], references: [id])
  medicId   String   @map(name: "medic_id")
  office    Office   @relation(fields: [officeId], references: [id])
  officeId  String   @map(name: "office_id")

  @@map(name: "schedule")
}

enum AppointmentsStatus {
  ACTIVE
  INACTIVE
}

model User {
  id               String       @id @default(cuid())
  cid              String       @unique() @default(cuid()) @map(name: "cid")
  username         String       @unique() @map(name: "username")
  password         String       @map(name: "password")
  photo            String?      @map(name: "photo")
  email            String       @unique() @map(name: "email")
  verified         Boolean      @default(false) @map(name: "verified")
  verificationCode String       @map(name: "verification_code")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  userStatus       UserStatus?  @default(ACTIVE) @map(name: "user_status")
  role             Role         @relation(fields: [roleId], references: [id])
  roleId           String       @map(name: "role_id")
  enterprise       Enterprise[]

  @@map(name: "user")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Warehouse {
  id           String     @id @default(cuid())
  cid          String     @unique() @default(cuid()) @map(name: "cid")
  name         String     @map(name: "name")
  product      Product[]
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId String     @map(name: "enterprise_id")

  @@map(name: "warehouse")
}

model Product {
  id          String         @id @unique @default(cuid())
  description String         @map(name: "description")
  price       String         @map(name: "price")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  expiratedAt DateTime
  status      ProductStatus? @default(ACTIVE) @map(name: "status")
  warehouse   Warehouse      @relation(fields: [warehouseId], references: [id])
  warehouseId String         @map(name: "warehouse_id")

  @@map(name: "product")
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

model Services {
  id           String         @id @unique @default(cuid())
  cod          String         @map(name: "cod")
  description  String         @map(name: "description")
  price        String         @map(name: "price")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  status       ServiceStatus? @default(ACTIVE) @map(name: "status")
  enterprise   Enterprise     @relation(fields: [enterpriseId], references: [id])
  enterpriseId String         @map(name: "enterprise_id")

  @@map(name: "services")
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}
